name: Python Package

on:
  push:
    branches: [main]
    tags:
      - "v*"
  pull_request:
    branches: [main]

# Add global permissions for the workflow
permissions:
  contents: write
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install -e .
      - name: Test with pytest
        run: |
          pytest --cov=contactsmanager

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install -e .
      - name: Run integration tests
        env:
          TEST_CONFIG: ${{ secrets.TEST_CONFIG }}
        run: |
          python -m contactsmanager.integration_tests.run_tests

  publish-on-tag:
    needs: [test, integration-test]
    runs-on: ubuntu-latest
    # Only publish on tag push
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      - name: Build and publish
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m build
          twine check dist/*
          twine upload dist/*

  publish-on-main:
    needs: [test, integration-test]
    runs-on: ubuntu-latest
    # Only publish when code is merged into main branch (not on PRs)
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      - name: Get current version
        id: get_version
        run: |
          VERSION=$(python -c "import os, re; file = open(os.path.join('contactsmanager', '__init__.py'), 'r'); content = file.read(); file.close(); print(re.search(r'__version__ = [\'\"](.*?)[\'\"]', content).group(1))")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"
      # Using the newer release action instead of the deprecated one
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          generateReleaseNotes: true
      - name: Build and publish
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m build
          twine check dist/*
          twine upload dist/*
